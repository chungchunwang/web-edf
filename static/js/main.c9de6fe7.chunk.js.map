{"version":3,"sources":["Component/Navbar/Navbar.module.css","Component/SignalHeader/SignalHeader.module.css","App.module.css","Component/SideBar/SideBar.module.css","Component/Shadow/Shadow.module.css","Classes/Signal/Signal.js","Component/SignalHeader/SignalHeader.js","Component/GraphComponent/GraphComponent.js","Component/View/View.js","Classes/EDF/EDF.js","Component/Navbar/Navbar.js","Component/SideBar/SideBar.js","Component/Shadow/Shadow.js","Classes/DataRecord/DataRecord.js","Classes/DataRecords/DataRecords.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Signal","label","transducerType","physicalDimension","physicalMinimum","physicalMaximum","digitalMinimum","digitalMaximum","prefiltering","numSamplesPerDataRecord","this","maxBound","minBound","SignalHeader","props","state","maxBoundLast","minBoundLast","shiftLast","dragStartHandler","event","dataTransfer","setData","position","toString","dragOver","preventDefault","drop","data","getData","swapSignalBoxOrder","parseInt","console","log","zoom","deltaY","setSignalBoxMaxBound","setSignalBoxMinBound","maxBoundChange","pos","delta","setState","minBoundChange","shift","background","React","createRef","current","addEventListener","className","classes","Background","style","backgroundColor","color","ref","onDragOver","onDrop","onScroll","Center","DragHandle","draggable","onDragStart","Label","yAxis","onChange","disableReset","signal","HighBoundLabel","LowBoundLabel","Component","GraphComponent","signalBoxWidth","drawBoxes","i","edf","numSignals","signalBoxSizing","channelBoxVertices","total","item","top","bottom","j","push","channelBoxBuffer","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","useProgram","shaderProgram","coord","getAttribLocation","colorUniformLocation","getUniformLocation","uniform4f","vertexAttribPointer","FLOAT","enableVertexAttribArray","drawArrays","TRIANGLE_STRIP","drawLines","numSamples","signals","signalBoxOrder","lineVertices","boxHeight","Math","abs","max","signalBoxMaxBound","unit","signalBoxMinBound","zero","dataRecords","records","samples","LINE_STRIP","drawFrame","zoomEvent","e","touchStart","touchMove","touchEnd","mouseDown","mouseMove","mouseUp","dblClick","contextMenu","canvas","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","window","requestAnimationFrame","graph","devicePixelRatio","width","clientWidth","height","clientHeight","getContext","antialias","transparent","createShaderProgram","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","viewport","View","sectionBoxSizing","setSignalBoxSizing","sizing","setSectionBoxSizing","getSignalBoxSizing","first","second","buf","slice","r","g","b","a","initialSize","floor","length","split","minSize","size","EDF","version","patientID","recordingID","startDate","startTime","numDataRecords","dataRecordDuration","Navbar","Menu","onClick","sideBarToggle","Title","FileName","FrameNavigationButtonGroup","LeftFrameButton","RightFrameButton","SideBar","activeItemId","onSelect","itemId","items","title","elemBefore","name","subNav","Shadow","DataRecord","resolution","DataRecords","App","sideBar","dataRecord","sin","transitionStyles","entering","left","entered","exiting","exited","Transition","in","timeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9de6fe7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"Navbar_Background__t6HNZ\",\"Menu\":\"Navbar_Menu__31JhJ\",\"Title\":\"Navbar_Title__3XeUr\",\"LeftFrameButton\":\"Navbar_LeftFrameButton__1eqXo\",\"RightFrameButton\":\"Navbar_RightFrameButton__1Fq2i\",\"FrameNavigationButtonGroup\":\"Navbar_FrameNavigationButtonGroup__3Jb6E\",\"FileName\":\"Navbar_FileName__2waRy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"SignalHeader_Background__1zqVa\",\"Center\":\"SignalHeader_Center__bPlrg\",\"DragHandle\":\"SignalHeader_DragHandle__15Men\",\"Label\":\"SignalHeader_Label__3lCgR\",\"HighBoundLabel\":\"SignalHeader_HighBoundLabel__21VDD\",\"LowBoundLabel\":\"SignalHeader_LowBoundLabel__iZWG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"App_Background__14_hr\",\"Navbar\":\"App_Navbar__26oD_\",\"View\":\"App_View__1RCWD\",\"SideBar\":\"App_SideBar__1lQ4Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"SideBar_Background__t8yqE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"Shadow_Background__3arsa\"};","\r\n    /*\r\n    This is an object to hold an EDF signal's metadata.\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    label                   |\r\n    transducerType          |\r\n    physicalDimension       |\r\n    physicalMinimum         |\r\n    physicalMaximum         |\r\n    digitalMinimum          |\r\n    digitalMaximum          |\r\n    prefiltering            |\r\n    numSamplesPerDataRecord |\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    */\r\nclass Signal {\r\n    label = \"\";\r\n    transducerType = \"\";\r\n    physicalDimension = 0;\r\n    physicalMinimum = 0;\r\n    physicalMaximum = 0;\r\n    digitalMinimum = 0;\r\n    digitalMaximum = 0;\r\n    prefiltering = \"\";\r\n    numSamplesPerDataRecord = 0;\r\n\r\n    constructor(label, transducerType, physicalDimension, physicalMinimum, physicalMaximum, digitalMinimum, digitalMaximum, prefiltering, numSamplesPerDataRecord){\r\n        this.label = label;\r\n        this.transducerType = transducerType;\r\n        this.physicalDimension = physicalDimension;\r\n        this.physicalMinimum = physicalMinimum;\r\n        this.physicalMaximum = physicalMaximum;\r\n        this.digitalMinimum = digitalMinimum;\r\n        this.digitalMaximum = digitalMaximum;\r\n        this.prefiltering = prefiltering;\r\n        this.numSamplesPerDataRecord = numSamplesPerDataRecord;\r\n        this.maxBound = 100;\r\n        this.minBound = -100;\r\n    }\r\n}\r\n\r\nexport default Signal;","/*\r\nimport React from 'react';\r\nimport classes from './SignalHeader.module.css';\r\nimport DragRange from 'react-drag-range';\r\n\r\nconst SignalHeader = (props) => {\r\n    const dragStartHandler = (event) => {\r\n        event.dataTransfer.setData('text/plain', \"This text may be dragged\");\r\n    }\r\n    return (\r\n        <div style={{ backgroundColor: \"#\" + props.color }} className={classes.Background} draggable=\"true\" onDragStart={dragStartHandler}>\r\n            <div className={classes.Label}>{props.label}</div>\r\n            <DragRange yAxis ><span className={classes.HighBoundLabel}>100</span></DragRange>\r\n            <DragRange yAxis > <span className={classes.LowBoundLabel}>-100</span></DragRange>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignalHeader;\r\n*/\r\nimport React, { Component } from 'react';\r\nimport classes from './SignalHeader.module.css';\r\nimport DragRange from 'react-drag-range';\r\nimport { CgArrowAlignV } from \"react-icons/cg\";\r\n\r\nclass SignalHeader extends Component {\r\n    state = {\r\n        maxBoundLast: 0,\r\n        minBoundLast: 0,\r\n        shiftLast:0\r\n    }\r\n    dragStartHandler = (event) => {\r\n        event.dataTransfer.setData('text', this.props.position.toString());\r\n    }\r\n    dragOver = (event) => {\r\n        event.preventDefault();\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.background = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        this.background.current.addEventListener(\"wheel\", this.zoom);\r\n    }\r\n    drop = (event) => {\r\n        event.preventDefault();\r\n        var data = event.dataTransfer.getData(\"text\");\r\n        this.props.swapSignalBoxOrder(this.props.position, parseInt(data));\r\n        console.log(data);\r\n    }\r\n    zoom = (event) => {\r\n        if (event.deltaY < 0) {\r\n            this.props.setSignalBoxMaxBound(this.props.position, -1);\r\n            this.props.setSignalBoxMinBound(this.props.position, 1);\r\n        }\r\n        else {\r\n            this.props.setSignalBoxMaxBound(this.props.position, 1);\r\n            this.props.setSignalBoxMinBound(this.props.position, -1);\r\n        }\r\n    }\r\n    maxBoundChange = (pos) => {\r\n        const delta = pos - this.state.maxBoundLast;\r\n        if (delta < 0) {\r\n            this.props.setSignalBoxMaxBound(this.props.position, 1);\r\n        }\r\n        else if (delta > 0) {\r\n            this.props.setSignalBoxMaxBound(this.props.position, -1);\r\n        }\r\n        this.setState({ maxBoundLast: pos });\r\n    }\r\n    minBoundChange = (pos) => {\r\n        const delta = pos - this.state.minBoundLast;\r\n        if (delta < 0) {\r\n            this.props.setSignalBoxMinBound(this.props.position, 1);\r\n        }\r\n        else if (delta > 0) {\r\n            this.props.setSignalBoxMinBound(this.props.position, -1);\r\n        }\r\n        this.setState({ minBoundLast: pos });\r\n    }\r\n    shift = (pos)=>{\r\n        const delta = pos - this.state.shiftLast;\r\n        if (delta < 0) {\r\n            this.props.setSignalBoxMinBound(this.props.position, -1);\r\n            this.props.setSignalBoxMaxBound(this.props.position, -1);\r\n        }\r\n        else if (delta > 0) {\r\n            this.props.setSignalBoxMinBound(this.props.position, 1);\r\n            this.props.setSignalBoxMaxBound(this.props.position, 1);\r\n        }\r\n        this.setState({ shiftLast: pos });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.Background} style={{ backgroundColor: \"#\" + this.props.color }} ref={this.background} onDragOver={this.dragOver} onDrop={this.drop} onScroll={this.onScroll}>\r\n                <div className={classes.Center}>\r\n                    <div className={classes.DragHandle} draggable=\"true\" onDragStart={this.dragStartHandler} >\r\n                        <CgArrowAlignV />\r\n                    </div>\r\n                    <div className={classes.Label}><DragRange yAxis onChange={this.shift} disableReset >{this.props.signal.label}</DragRange></div>\r\n                </div>\r\n                <DragRange yAxis onChange={this.maxBoundChange} disableReset ><span className={classes.HighBoundLabel}>{this.props.maxBound}</span></DragRange>\r\n                <DragRange yAxis onChange={this.minBoundChange} disableReset > <span className={classes.LowBoundLabel}>{this.props.minBound}</span></DragRange>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignalHeader;","import React, { Component } from 'react';\r\n/*\r\nGets properties Graph and renders its edf content.\r\n*/\r\nclass GraphComponent extends Component {\r\n\r\n    //variables\r\n    canvas;\r\n    gl;\r\n    shaderProgram;\r\n    graph;\r\n    signalBoxWidth = 200;\r\n    constructor(props) {\r\n        super();\r\n        this.canvas = React.createRef();\r\n    }\r\n    createShaderProgram() {\r\n        var vertCode = `attribute vec2 coordinates;\r\n            void main(void) {\r\n      gl_Position = vec4(coordinates,0.0, 1.0);\r\n     }`\r\n        var vertShader = this.gl.createShader(this.gl.VERTEX_SHADER);\r\n        this.gl.shaderSource(vertShader, vertCode);\r\n        this.gl.compileShader(vertShader);\r\n        var fragCode =\r\n            `precision mediump float;\r\n            uniform vec4 u_color;\r\n            void main(void) {\r\n     gl_FragColor = u_color;\r\n    }`\r\n        var fragShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\r\n        this.gl.shaderSource(fragShader, fragCode);\r\n        this.gl.compileShader(fragShader);\r\n        this.shaderProgram = this.gl.createProgram();\r\n        this.gl.attachShader(this.shaderProgram, vertShader);\r\n        this.gl.attachShader(this.shaderProgram, fragShader);\r\n        this.gl.linkProgram(this.shaderProgram);\r\n        this.gl.useProgram(this.shaderProgram);\r\n    }\r\n    drawBoxes = () =>{\r\n        for (let i = 0; i < this.props.edf.numSignals; i++) {\r\n            let signalBoxSizing = this.props.signalBoxSizing;\r\n            const channelBoxVertices = [];\r\n\r\n            let total = 0;\r\n            for(let item in signalBoxSizing){\r\n                total += parseInt(signalBoxSizing[item]);\r\n            }\r\n            let top = 0;\r\n            let bottom = 0;\r\n            let j;\r\n            for(j = 0; j< i; j++){\r\n                top+= parseInt(signalBoxSizing[j]);\r\n            }\r\n            bottom = top;\r\n            bottom += parseInt(signalBoxSizing[j]);\r\n            top = top*2/total;\r\n            bottom = bottom*2/total;\r\n            channelBoxVertices.push(-1);\r\n            channelBoxVertices.push(1 - top);\r\n            channelBoxVertices.push(-1);\r\n            channelBoxVertices.push(1 - bottom);\r\n            channelBoxVertices.push(1);\r\n            channelBoxVertices.push(1 - top);\r\n            channelBoxVertices.push(1);\r\n            channelBoxVertices.push(1 - bottom);\r\n            let channelBoxBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, channelBoxBuffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(channelBoxVertices), this.gl.STATIC_DRAW);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n            this.gl.useProgram(this.shaderProgram);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, channelBoxBuffer);\r\n            var coord = this.gl.getAttribLocation(this.shaderProgram, \"coordinates\");\r\n            var colorUniformLocation = this.gl.getUniformLocation(this.shaderProgram, \"u_color\");\r\n            this.gl.uniform4f(colorUniformLocation, 1-(i/this.props.edf.numSignals),1-(i/this.props.edf.numSignals/2), 0.5, 1);\r\n            this.gl.vertexAttribPointer(coord, 2, this.gl.FLOAT, false, 0, 0);\r\n            this.gl.enableVertexAttribArray(coord);\r\n            this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n    }\r\n    drawLines = () =>{\r\n        for (let i = 0; i < this.props.edf.numSignals; i++) {\r\n            let signalBoxSizing = this.props.signalBoxSizing;\r\n            let total = 0;\r\n            for(let item in signalBoxSizing){\r\n                total += parseInt(signalBoxSizing[item]);\r\n            }\r\n            let top = 0;\r\n            let bottom = 0;\r\n            let j;\r\n            for(j = 0; j< i; j++){\r\n                top+= parseInt(signalBoxSizing[j]);\r\n            }\r\n            bottom = top;\r\n            bottom += parseInt(signalBoxSizing[j]);\r\n            top = top*2/total;\r\n            bottom = bottom*2/total;\r\n\r\n            const numSamples = this.props.edf.signals[this.props.signalBoxOrder[i]].numSamplesPerDataRecord;\r\n            const lineVertices = [];\r\n            const boxHeight = Math.abs(bottom-top);\r\n            const max = this.props.signalBoxMaxBound[this.props.signalBoxOrder[i]];\r\n            const min = this.props.signalBoxMinBound[this.props.signalBoxOrder[i]];\r\n            const unit = boxHeight/(max-min);\r\n            const zero = 1- top - max*unit;\r\n            for(let j = 0; j< numSamples; j++){\r\n                lineVertices.push((j/numSamples)*2-1);\r\n                lineVertices.push(this.props.dataRecords.records[i].samples[j]*unit + zero);\r\n            }\r\n            /*\r\n            channelBoxVertices.push(-1);\r\n            channelBoxVertices.push(1 - top);\r\n            channelBoxVertices.push(-1);\r\n            channelBoxVertices.push(1 - bottom);\r\n            channelBoxVertices.push(1);\r\n            channelBoxVertices.push(1 - top);\r\n            channelBoxVertices.push(1);\r\n            channelBoxVertices.push(1 - bottom);\r\n            */\r\n            let channelBoxBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, channelBoxBuffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(lineVertices), this.gl.STATIC_DRAW);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n            this.gl.useProgram(this.shaderProgram);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, channelBoxBuffer);\r\n            var coord = this.gl.getAttribLocation(this.shaderProgram, \"coordinates\");\r\n            var colorUniformLocation = this.gl.getUniformLocation(this.shaderProgram, \"u_color\");\r\n            this.gl.uniform4f(colorUniformLocation, 0.35,0.35, 0.35, 1);\r\n            this.gl.vertexAttribPointer(coord, 2, this.gl.FLOAT, false, 0, 0);\r\n            this.gl.enableVertexAttribArray(coord);\r\n            this.gl.drawArrays(this.gl.LINE_STRIP, 0, numSamples);\r\n        }\r\n    }\r\n    drawFrame =()=>{\r\n        this.drawLines();\r\n        this.drawBoxes();\r\n        \r\n    }\r\n    componentDidUpdate(){\r\n        window.requestAnimationFrame(this.drawFrame);\r\n    }\r\n    componentDidMount() {\r\n        this.graph = this.props.edf;\r\n        const devicePixelRatio = window.devicePixelRatio || 1;\r\n        this.canvas.current.width = this.canvas.current.clientWidth * devicePixelRatio;\r\n        this.canvas.current.height = this.canvas.current.clientHeight * devicePixelRatio;\r\n        const numX = this.canvas.current.width;\r\n        this.gl = this.canvas.current.getContext(\"webgl\", {\r\n            antialias: true,\r\n            transparent: false,\r\n        });\r\n\r\n        this.createShaderProgram();\r\n        this.gl.clearColor(0.5, 0.5, 0.5, 0.9);\r\n            this.gl.enable(this.gl.DEPTH_TEST);\r\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n            this.gl.viewport(0, 0, this.canvas.current.width, this.canvas.current.height);\r\n        //Draw Signal Boxes\r\n        window.requestAnimationFrame(this.drawFrame);\r\n        /*\r\n        this.canvas.current.addEventListener(\"wheel\", this.zoomEvent);\r\n        this.canvas.current.addEventListener(\"touchstart\", this.touchStart);\r\n        this.canvas.current.addEventListener(\"touchmove\", this.touchMove);\r\n        this.canvas.current.addEventListener(\"touchend\", this.touchEnd);\r\n        this.canvas.current.addEventListener(\"mousedown\", this.mouseDown);\r\n        this.canvas.current.addEventListener(\"mousemove\", this.mouseMove);\r\n        this.canvas.current.addEventListener(\"mouseup\", this.mouseUp);\r\n        this.canvas.current.addEventListener(\"dblclick\", this.dblClick);\r\n        this.canvas.current.addEventListener(\"contextmenu\", this.contextMenu);\r\n        this.canvas.current.style.cursor = \"zoom-in\";\r\n        */\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                    <canvas ref={this.canvas} style={{ width: \"100%\", height: \"100%\"}}></canvas>\r\n        );\r\n    }\r\n    zoomEvent = (e) => { }\r\n    touchStart = (e) => { }\r\n    touchMove = (e) => { }\r\n    touchEnd = (e) => { }\r\n    mouseDown = (e) => { }\r\n    mouseMove = (e) => { }\r\n    mouseUp = (e) => { }\r\n    dblClick = (e) => { }\r\n    contextMenu = (e) => { }\r\n}\r\n\r\nexport default GraphComponent;","import React, { Component } from 'react';\r\nimport SignalHeader from '../SignalHeader/SignalHeader';\r\nimport SplitPane from 'react-split-pane';\r\nimport Pane from 'react-split-pane/lib/Pane';\r\nimport GraphComponent from '../GraphComponent/GraphComponent';\r\n\r\nclass View extends Component {\r\n    state = {\r\n        signalBoxSizing: [],\r\n        sectionBoxSizing: [],\r\n        signalBoxOrder:[],\r\n        signalBoxMinBound:[],\r\n        signalBoxMaxBound:[]\r\n    }\r\n    setSignalBoxSizing = (sizing) => {\r\n        this.props.edf.signalBoxSizing = sizing;\r\n        this.setState({ signalBoxSizing: sizing });\r\n    }\r\n    setSectionBoxSizing = (sizing) => {\r\n        this.setState({ sectionBoxSizing: sizing })\r\n    }\r\n    getSignalBoxSizing = () => {\r\n        return this.state.signalBoxSizing;\r\n    }\r\n    constructor(props){\r\n        super();\r\n        const signalBoxSizing = [];\r\n        const signalBoxOrder = [];\r\n        const signalBoxMinBound=[];\r\n        const signalBoxMaxBound=[];\r\n        for (let i = 0; i < props.edf.numSignals; i++) {\r\n            signalBoxSizing[i] = 1;\r\n            signalBoxOrder[i] = i;\r\n            signalBoxMinBound[i] = -10;\r\n            signalBoxMaxBound[i] = 10;\r\n        }\r\n        this.state.signalBoxSizing = signalBoxSizing;\r\n        this.state.signalBoxOrder = signalBoxOrder;\r\n        this.state.signalBoxMaxBound = signalBoxMaxBound;\r\n        this.state.signalBoxMinBound = signalBoxMinBound;\r\n    }\r\n    swapSignalBoxOrder = (first, second) =>{\r\n        const signalBoxSizing = this.state.signalBoxSizing;\r\n        const signalBoxOrder = this.state.signalBoxOrder;\r\n        let buf = signalBoxSizing[first];\r\n        signalBoxSizing[first] = signalBoxSizing[second];\r\n        signalBoxSizing[second] = buf;\r\n        buf = signalBoxOrder[first];\r\n        signalBoxOrder[first] = signalBoxOrder[second];\r\n        signalBoxOrder[second] = buf;\r\n        this.setState({signalBoxOrder:signalBoxOrder,signalBoxSizing:signalBoxSizing});\r\n    }\r\n    setSignalBoxMinBound = (pos, delta)=>{\r\n        this.setState((state)=>{\r\n            const signalBoxMinBound = state.signalBoxMinBound.slice(0);\r\n            signalBoxMinBound[state.signalBoxOrder[pos]] = state.signalBoxMinBound[state.signalBoxOrder[pos]] + delta;\r\n            if(signalBoxMinBound[state.signalBoxOrder[pos]]>=state.signalBoxMaxBound[state.signalBoxOrder[pos]]){\r\n                return null;\r\n            }\r\n            return{signalBoxMinBound:signalBoxMinBound};\r\n        });\r\n    }\r\n    setSignalBoxMaxBound =(pos, delta)=>{\r\n        this.setState((state)=>{\r\n            const signalBoxMaxBound = state.signalBoxMaxBound.slice(0);\r\n            signalBoxMaxBound[state.signalBoxOrder[pos]] = state.signalBoxMaxBound[state.signalBoxOrder[pos]] + delta;\r\n            if(signalBoxMaxBound[state.signalBoxOrder[pos]]<=state.signalBoxMinBound[state.signalBoxOrder[pos]]){\r\n                return null;\r\n            }\r\n            return{signalBoxMaxBound:signalBoxMaxBound};\r\n        });\r\n    }\r\n    render() {\r\n        let signals = [];\r\n        const toPaddedColorHex = (r,g,b,a) =>{\r\n            r = Math.floor(r*225).toString(16);\r\n            g = Math.floor(g*225).toString(16);\r\n            b = Math.floor(b*225).toString(16);\r\n            a = Math.floor(a*225).toString(16);\r\n            r = (r.length === 1)?\"0\"+r:r;\r\n            g = (g.length === 1)?\"0\"+g:g;\r\n            b = (b.length === 1)?\"0\"+b:b;\r\n            a = (a.length === 1)?\"0\"+a:a;\r\n            return r+g+b+a;\r\n        }\r\n        for (let i = 0; i < this.props.edf.numSignals; i++) {\r\n            signals.push(<Pane initialSize={this.state.signalBoxSizing[i]}>\r\n                <SignalHeader \r\n                position = {i} \r\n                color = {toPaddedColorHex((1-(i+1)/this.props.edf.numSignals),(1-(i+1)/this.props.edf.numSignals/2),0.5,1)} \r\n                signal={this.props.edf.signals[this.state.signalBoxOrder[i]]}\r\n                swapSignalBoxOrder = {this.swapSignalBoxOrder}\r\n                setSignalBoxMaxBound = {this.setSignalBoxMaxBound}\r\n                setSignalBoxMinBound = {this.setSignalBoxMinBound}\r\n                maxBound = {this.state.signalBoxMaxBound[this.state.signalBoxOrder[i]]}\r\n                minBound = {this.state.signalBoxMinBound[this.state.signalBoxOrder[i]]} />\r\n                </Pane>);\r\n        }\r\n        return (\r\n            <SplitPane onChange={this.setSectionBoxSizing} split=\"vertical\" >\r\n                <Pane initialSize={this.state.sectionBoxSizing[0] ? this.state.sectionBoxSizing[0] : 10}>\r\n                    <SplitPane split=\"horizontal\" minSize=\"50px\" onChange={(size) => { this.setSignalBoxSizing(size) }}>\r\n                        {signals}\r\n                    </SplitPane>\r\n                </Pane>\r\n                <Pane initialSize={this.state.sectionBoxSizing[1] ? this.state.sectionBoxSizing[1] : 100}>\r\n                    <GraphComponent dataRecords = {this.props.dataRecords} signalBoxSizing={this.state.signalBoxSizing} signalBoxOrder={this.state.signalBoxOrder} edf={this.props.edf} signalBoxMinBound = {this.state.signalBoxMinBound} signalBoxMaxBound = {this.state.signalBoxMaxBound} />\r\n                </Pane>\r\n                <Pane initialSize={this.state.sectionBoxSizing[2] ? this.state.sectionBoxSizing[2] : 10}>\r\n                    <div><h4>This panel is still a work in progress, it should hold various properties, configurable settings, as well as annotation features.</h4>\r\n<h2>About:</h2>\r\n<b>Features:</b><br></br>\r\nThe panels on the left can all be adjusted accordingly by pulling on their edges.<br></br>\r\nThe maximum and minimum properties of the channels can be adjusted by selecting their displayed value and dragging up and down.<br></br>\r\nOther ways to manipulate these boundary properties include:<br></br>\r\n- Scrolling while the cursor is within the \"description box\" (box containing the name of the channel), which expands and contracts the signal vertically. <br></br>\r\n- Dragging the name of the channel, which shifts the signal up and down.<br></br>\r\nThe order of the channels can be changed by dragging the \"handle\" (icon with arrows pointing up and down) of one channel over another. This swaps the two channels.<br></br>\r\n<br></br><br></br>\r\nThe top left corner contains a button that opens a side bar which contains more features; unimplemented as yet.<br></br>\r\nThe two arrows at the top right are for moving between time frames; it is still a work in progress as well.<br></br>\r\n<br></br><br></br>\r\n<b>To be implemented:</b><br></br>\r\n- Zoom in/out<br></br>\r\n- Keyboard shortcuts to manipulate the value of the boundaries<br></br>\r\n- Input field to edit the boundary properties of the different channels<br></br>\r\n- Annotations<br></br>\r\n- Movement between pages of time frames<br></br>\r\n- File selection<br></br>\r\n<br></br><br></br>\r\nPlease suggest other features and ways to improve the current implementation!</div>\r\n                </Pane>\r\n            </SplitPane>\r\n        );\r\n    }\r\n}\r\n\r\nexport default View;","import Signal from '../Signal/Signal';\r\n    /*\r\n    This is an object to encompass the metadata of an EDF file.\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    version                 | Version of EDF used by the Graph component.\r\n    patientID               |\r\n    recordingID             |\r\n    startDate               |\r\n    startTime               |\r\n    numDataRecords          |\r\n    dataRecordDuration      |\r\n    numSignals              |\r\n    signals                 | Array which holds the signals of the EDF.\r\n    signalBoxSpacing        | Array which holds the spacing between the signals being displayed. (top:0 bottom:1)\r\n                            | signalBoxSpacing:     0  1  2  3  4  5  6\r\n                            | signals:               0  1  2  3  4  5\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    */\r\nclass EDF {\r\n    version = 0;\r\n    patientID = 0;\r\n    recordingID = 0;\r\n    startDate = \"1/1/1970\";\r\n    startTime = \"09:30\";\r\n    numDataRecords = 0;\r\n    dataRecordDuration = 0;\r\n    numSignals = 0;\r\n    signals = [];\r\n    constructor(version, patientID, recordingID, startDate, startTime, numDataRecords, dataRecordDuration, numSignals, signals){\r\n        this.version = version;\r\n        this.patientID = patientID;\r\n        this.recordingID = recordingID;\r\n        this.startDate = startDate;\r\n        this.startTime = startTime;\r\n        this.numDataRecords = numDataRecords;\r\n        this.dataRecordDuration = dataRecordDuration;\r\n        this.numSignals = numSignals;\r\n        this.signals = signals;\r\n    }\r\n}\r\n\r\nexport default EDF;","import React, { Component } from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport { BsFillCaretLeftFill, BsFillCaretRightFill,BsGrid3X3Gap } from \"react-icons/bs\";\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Background}>\r\n                <BsGrid3X3Gap className={classes.Menu} onClick = {this.props.sideBarToggle}/>\r\n                <span className={classes.Title}>EDF Web Viewer</span>\r\n                <span className={classes.FileName}>Sine.edf</span>\r\n                <span className={classes.FrameNavigationButtonGroup}>\r\n                    <BsFillCaretLeftFill className={classes.LeftFrameButton} />\r\n                    <BsFillCaretRightFill className={classes.RightFrameButton} />\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {Navigation} from 'react-minimal-side-navigation';\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\nimport { BsFillCaretLeftFill } from \"react-icons/bs\";\r\nimport classes from './SideBar.module.css';\r\nconst SideBar = () => {\r\n    return (\r\n        <div className = {classes.Background}>\r\n            <Navigation\r\n            // you can use your own router's api to get pathname\r\n            activeItemId=\"/management/members\"\r\n            onSelect={({itemId}) => {\r\n              // maybe push to the route\r\n            }}\r\n            items={[\r\n              {\r\n                title: 'Dashboard',\r\n                itemId: '/dashboard',\r\n                // you can use your own custom Icon component as well\r\n                // icon is optional\r\n                elemBefore: () => <BsFillCaretLeftFill name=\"inbox\" />,\r\n              },\r\n              {\r\n                title: 'Management',\r\n                itemId: '/management',\r\n                elemBefore: () => <BsFillCaretLeftFill name=\"users\" />,\r\n                subNav: [\r\n                  {\r\n                    title: 'Projects',\r\n                    itemId: '/management/projects',\r\n                    // Requires v1.9.1+ (https://github.com/abhijithvijayan/react-minimal-side-navigation/issues/13)\r\n                    elemBefore: () => <BsFillCaretLeftFill name=\"cloud-snow\" />,\r\n                  },\r\n                  {\r\n                    title: 'Members',\r\n                    itemId: '/management/members',\r\n                    elemBefore: () => <BsFillCaretLeftFill name=\"coffee\" />,\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                title: 'Another Item',\r\n                itemId: '/another',\r\n                subNav: [\r\n                  {\r\n                    title: 'Teams',\r\n                    itemId: '/management/teams',\r\n                  },\r\n                ],\r\n              },\r\n            ]}\r\n          />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SideBar;","import React from 'react';\r\nimport classes from './Shadow.module.css';\r\n\r\nconst Shadow = (props) => {\r\n    return (\r\n        <div className = {classes.Background} onClick={props.onClick} />\r\n    );\r\n};\r\n\r\nexport default Shadow;","/*\r\n    This is an object to hold a single data record for a channel.\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    resolution              |\r\n    samples                 | Array of 16bit Integers\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    */\r\nclass DataRecord{\r\n    constructor(){\r\n        this.samples = [];\r\n        this.resolution = 1;\r\n    }\r\n    resolution;\r\n    samples = [];\r\n}\r\n\r\nexport default DataRecord;","import DataRecord from '../DataRecord/DataRecord';\r\n/*\r\n    This is an object to hold a single data record for a channel.\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    resolution              |\r\n    samples                 | Array of 16bit Integers\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    */\r\n    class DataRecords{\r\n        constructor(){\r\n            this.records = [];\r\n        }\r\n        records = [];\r\n    }\r\n    \r\n    export default DataRecords;","import React, { Component } from 'react';\nimport Signal from './Classes/Signal/Signal.js';\nimport classes from './App.module.css';\nimport View from './Component/View/View';\nimport EDF from './Classes/EDF/EDF.js';\nimport  Navbar  from './Component/Navbar/Navbar';\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\nimport SideBar from './Component/SideBar/SideBar.js';\nimport Shadow from './Component/Shadow/Shadow.js';\nimport { Transition } from 'react-transition-group';\nimport DataRecords from './Classes/DataRecords/DataRecords.js';\nimport DataRecord from './Classes/DataRecord/DataRecord.js';\n\nclass App extends Component {\n  state = {\n    sideBar:false\n  }\n  sideBarToggle = () =>{\n    this.setState((state)=>({sideBar:!state.sideBar}));\n  }\n  render() {\n    const signals = [];\n    for(let i = 0; i< 12; i++){\n      const signal = new Signal();\n      signal.label = \"test\" + i;\n      signal.numSamplesPerDataRecord = 10000;\n      signals.push(signal);\n    }\n\n    const dataRecords = new DataRecords();\n    for(let i=0; i< 12; i++){\n      const dataRecord = new DataRecord();\n      for(let j=0; j< 10000;j++){\n        dataRecord.samples.push(Math.sin(j/50)*3);\n      }\n      dataRecords.records.push(dataRecord);\n    }\n\n    const transitionStyles = {\n      entering: { left: 0 },\n      entered:  { left: 0 },\n      exiting:  { left: -500 },\n      exited:  { left: -500 },\n    };\n\n    const edf = new EDF(0,3434,34343,\"1/1/1970\",\"3:30\",10,2,12,signals);\n    return (\n      <div className = {classes.Background}>\n        <Transition in = {this.state.sideBar} timeout={300}>\n          {state =>(<div className = {classes.SideBar} style = {transitionStyles[state]} ><SideBar /></div>)}\n        </Transition>\n        {this.state.sideBar?<Shadow onClick = {this.sideBarToggle} />:null}\n        <div className = {classes.Navbar}><Navbar sideBarToggle = {this.sideBarToggle} /> </div>\n        <div className = {classes.View}><View edf = {edf} dataRecords = {dataRecords}/> </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}